import timeimport datetime, osimport pymysql as sqlfrom datetime import datetime, timedelta#conn=sql.connect(host=host1, user=user1,port=port1,password=password1)host1='localhost'user1='omni_chms'port1=3306password1='omni@1234'db1='omni'def prime():	conn=sql.connect(host=host1, user=user1,port=port1,password=password1)	with conn.cursor() as curr: 			try:				s='''CREATE DATABASE omni;'''				curr.execute(s)				conn.commit()				print("Database created")			except:				print("Database Exists")				pass			try:				curr.execute('''USE omni;''')				conn.commit()				curr.execute('''CREATE TABLE TableCameraActivity (EntryID int NOT NULL AUTO_INCREMENT,							 InfoCode char(255) NOT NULL,							 InfoType char(255),							 TimeStamp datetime,							 CameraID char(255),							 CameraStatus char(255),							 ActionPending char(255),							 PRIMARY KEY (EntryID));''')			except:				print("Table TableCameraActivity Exists")				pass			try:				curr.execute('''USE omni;''')				conn.commit()				curr.execute('''CREATE TABLE TableAdvanceAnalytics(EntryID int NOT NULL AUTO_INCREMENT,							 InfoCode char(255) NOT NULL,							 NumberOfPeople int,							 NumberOfAnimals int,							 NumberOfVehicles int,							 TimeStamp datetime,							 CameraID char(255),							 CameraStatus char(255),							 ActionPending char(255),							 PRIMARY KEY (EntryID));''')			except:				print("Table TableAdvanceAnalytics Exists")				pass	conn.close()def secondary_init():	conn=sql.connect(host=host1, user=user1,port=port1,password=password1)	with conn.cursor() as curr: 			try:				s='''CREATE DATABASE omni;'''				curr.execute(s)				conn.commit()				print("Database created")			except:				print("Database Exists")			## camera status			try:				curr.execute("USE omni;")				conn.commit()				curr.execute('''CREATE TABLE CameraHealth (ID int NOT NULL AUTO_INCREMENT,							Name char(255) UNIQUE,							CameraIP char(255) NOT NULL,							Status char(255),							PRIMARY KEY (ID));''')			except:				'''				curr.execute("USE omni;")				conn.commit()				curr.execute("DELETE from CameraHealth where 1")				#conn.commit()				'''				print("Table CameraHealth Exists")							try:				curr.execute("USE omni;")				conn.commit()				curr.execute('''CREATE TABLE TamperedCamera (SNo int NOT NULL AUTO_INCREMENT,							Name char(255) ,							CameraIP char(255) NOT NULL,							TimeStamp datetime,							Event char(255),							TamperFrame char(255),							SearchFrame1 char(255),							SearchFrame2 char(255),							SearchFrame3 char(255),							SearchFrame4 char(255),							PRIMARY KEY (SNo));''')			except:				#raise Exception				print("Table TamperedCamera Exists")			## daily report table			try:				curr.execute("USE omni;")				conn.commit()				curr.execute('''CREATE TABLE DailyReport (ID int NOT NULL AUTO_INCREMENT,							Name char(255),							CameraIP char(255),							TimeStamp datetime,							Entered int,Exited int,Original char(255),Heatmap char(255),Video char(255),Intelligent_Summary char(255),PRIMARY KEY (ID));''')			except:				print("Table Daily Report Exists")			## heatmap table			try:				curr.execute("USE omni;")				conn.commit()				curr.execute('''CREATE TABLE heatmap (ID int NOT NULL AUTO_INCREMENT,							Name char(255),							TimeStamp datetime,							Original char(255),Heatmap char(255),Percentage int,PRIMARY KEY (ID));''')			except:				print("Table Heatmap Exists")## just to test'''def tamperEntry(name,ip,event):	conn=sql.connect(host=host1,user=user1,port=port1,password=password1)	times=str(datetime.datetime.now()).split(".")[0]	with conn.cursor() as curr:		curr.execute("USE omni;")		conn.commit()		curr.execute("INSERT into TamperedCamera(Name,CameraIP,TimeStamp,")		curr.execute("UPDATE CameraHealth set Status=status where CameraIP='ip'")		conn.commit()'''def insertCameraHealth(name,ip,status="working"):	conn=sql.connect(host=host1,user=user1,port=port1,password=password1)	try:		with conn.cursor() as curr:			curr.execute("USE omni;")			conn.commit()			#print(status,type(ip))			param=(str(name),str(ip),str(status))			curr.execute("INSERT into CameraHealth(Name,CameraIP,Status) VALUES(%s,%s,%s)",param)			conn.commit()			print("entry made in Camera health for %s"%name)	except Exception as e:		#raise e		print("Entry already exists FOR %s"%name)def updateCameraHealth(name,ip,status):	conn=sql.connect(host=host1,user=user1,port=port1,password=password1)	with conn.cursor() as curr:		curr.execute("USE omni;")		conn.commit()		#print(status,type(ip))		param=(str(status),str(name))		curr.execute("UPDATE CameraHealth SET Status=%s where Name=%s",param)		conn.commit()def insert2tampered(Name,CameraIP,TimeStamp,TamperedFrame,searchframe,Event):	if len(searchframe)==1:		SearchFrame1,SearchFrame2,SearchFrame3,SearchFrame4 = [searchframe[0],"None","None","None"]	elif len(searchframe)==2:		SearchFrame1,SearchFrame2,SearchFrame3,SearchFrame4 = [searchframe[0],searchframe[1],"None","None"]	elif len(searchframe)==3:		SearchFrame1,SearchFrame2,SearchFrame3,SearchFrame4 = [searchframe[0],searchframe[1],searchframe[2],"None"]	elif len(searchframe)==4:		SearchFrame1,SearchFrame2,SearchFrame3,SearchFrame4 = [searchframe[0],searchframe[1],searchframe[2],searchframe[3]]	else:		SearchFrame1,SearchFrame2,SearchFrame3,SearchFrame4 = ["Error","error","error","error"]		conn=sql.connect(host=host1, user=user1,port=port1,password=password1)		with conn.cursor() as curr:			curr.execute('''USE omni;''')			conn.commit()			param=(str(Name),str(CameraIP),str(TimeStamp),str(Event),str(TamperedFrame),str(SearchFrame1),str(SearchFrame2),str(SearchFrame3),str(SearchFrame4))			#print(param)			curr.execute("INSERT INTO TamperedCamera(Name,CameraIP,TimeStamp,Event,TamperFrame,SearchFrame1,SearchFrame2,SearchFrame3,SearchFrame4) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)",param)			conn.commit()	conn.close()def heatmapsEntry(Name,TimeStamp,Original,Heatmap,percent):	conn=sql.connect(host=host1,user=user1,port=port1,password=password1,db=db1)	param=(str(Name),str(TimeStamp),str(Original),str(Heatmap),str(percent))	try:		with conn.cursor() as curr:			curr.execute("INSERT INTO Heatmap(Name,TimeStamp,Original,Heatmap,Percentage) VALUES (%s,%s,%s,%s,%s)",param)			conn.commit()		conn.close()	except Exception as e:		print("entered into exception")		raise edef dailyEntry(Name,TimeStamp,CameraIP=0,Entered=0,Exited=0,Original=0,Heatmap=0,Video=0,Intelligent_Summary=0):	time=str(TimeStamp).split(" ")[0]+"%"	conn=sql.connect(host=host1,user=user1,port=port1,password=password1,db=db1)	try:		with conn.cursor() as curr:			if not Entered==0 and not Exited==0:				param=(str(Entered),str(Exited),str(Name),str(time))				curr.execute("UPDATE DailyReport SET Entered=%s, Exited=%s WHERE Name=%s AND TimeStamp LIKE %s",param)				conn.commit()			elif not Original==0:				param=(str(Original),str(Name),str(time))				curr.execute("UPDATE DailyReport SET Original=%s WHERE Name=%s AND TimeStamp LIKE %s",param)				conn.commit()			elif not Heatmap==0:				param=(str(Heatmap),str(Name),str(time))				curr.execute("UPDATE DailyReport SET Heatmap=%s WHERE Name=%s AND TimeStamp LIKE %s",param)				conn.commit()			elif not Video==0:				param=(str(Video),str(Name),str(time))				curr.execute("UPDATE DailyReport SET Video=%s WHERE Name=%s AND TimeStamp LIKE %s",param)				conn.commit()			elif not Intelligent_Summary==0:				param=(str(Intelligent_Summary),str(Name),str(time))				curr.execute("UPDATE DailyReport SET Intelligent_Summary=%s WHERE Name=%s AND TimeStamp LIKE %s",param)				conn.commit()			else:				param=(str(Name),str(CameraIP),str(TimeStamp).split(".")[0])				curr.execute("INSERT DailyReport(Name,CameraIP,TimeStamp) Values(%s,%s,%s)",param)				conn.commit()					conn.close()	except Exception as e:		print(Name,"Entered into Exception for DailyReport",e)		#raise Exceptionif __name__ == '__main__':	secondary_init()	pass	#dailyEntry("Try",datetime.datetime.now())	#heatmapsEntry("Piyush","2019-06-13",r"E:\CameraHealthManagementSystem\static\2019-06-12\cabin\heatmap\original1.jpg",r"E:\CameraHealthManagementSystem\static\2019-06-12\cabin\heatmap\heatmap1.jpg","72")	#updateCameraHealth("cabin","192.168.0.105","working")#insert2tampered("name","192.168.0.72","17-02-19","frame","tampering")